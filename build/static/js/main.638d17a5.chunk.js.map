{"version":3,"sources":["components/Titles.js","components/Forms.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Forms","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iQAeeA,E,uKAXX,OACE,yBAAKC,UAAU,kBACb,wBAAIA,UAAU,wBAAd,kBACA,wBAAIA,UAAU,2BAAd,qD,GALaC,IAAMC,WCcZC,E,uKAZX,OACE,yBAAKH,UAAU,iBACb,0BAAMI,SAAUC,KAAKC,MAAMC,YACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,4BAAQV,UAAU,wBAAlB,qB,GAPUC,IAAMC,WC2BXS,E,uKAzBX,OACE,yBAAKX,UAAU,gBACZK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAC7B,uBAAGb,UAAU,eAAb,aACaK,KAAKC,MAAMM,KADxB,KACgCP,KAAKC,MAAMO,SAI5CR,KAAKC,MAAMQ,aACV,uBAAGd,UAAU,iBAAb,gBAA2CK,KAAKC,MAAMQ,aAEvDT,KAAKC,MAAMS,UACV,uBAAGf,UAAU,iBAAb,aAAwCK,KAAKC,MAAMS,UAEpDV,KAAKC,MAAMU,aACV,uBAAGhB,UAAU,iBAAb,eAA0CK,KAAKC,MAAMU,aAEtDX,KAAKC,MAAMW,OACV,uBAAGjB,UAAU,iBAAiBK,KAAKC,MAAMW,Y,GApB7Bf,aCGhBgB,EAAU,mCAwEDC,E,4MArEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAETd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAKYC,MAAM,qDAAD,OAC2BhB,EAD3B,YACmCC,EADnC,kBACoDK,EADpD,kBALjB,cAKLW,EALK,gBASQA,EAASC,OATjB,OASLC,EATK,OAUPnB,GAAQC,EAEV,EAAKmB,SAAS,CACZlB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAGT,EAAKe,SAAS,CACZlB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,oDA3BA,4C,6GAgCX,OACE,6BACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAOO,WAAYF,KAAKE,aACxB,kBAAC,EAAD,CACEO,YAAaT,KAAKe,MAAMN,YACxBF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,SAAUV,KAAKe,MAAML,SACrBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,kB,GA1DpBhB,IAAMC,W,YCKJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.638d17a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"titleContainer\">\r\n        <h1 className=\"titleContainer_title\">Weather Finder</h1>\r\n        <h3 className=\"titleContainer_subtitle\">\r\n          Find out temperature, conditions and more...\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nclass Forms extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"formContainer\">\r\n        <form onSubmit={this.props.getWeather}>\r\n          <input type=\"text\" name=\"city\" placeholder=\"City\"></input>\r\n          <input type=\"text\" name=\"country\" placeholder=\"Country\"></input>\r\n          <button className=\"formContainer_button\">Get Weather</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forms;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Weather extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"weather_info\">\r\n        {this.props.city && this.props.country && (\r\n          <p className=\"weather_key\">\r\n            Location: {this.props.city}, {this.props.country}\r\n          </p>\r\n        )}\r\n\r\n        {this.props.temperature && (\r\n          <p className=\"weather_value\">Temperature: {this.props.temperature}</p>\r\n        )}\r\n        {this.props.humidity && (\r\n          <p className=\"weather_value\">Humidity: {this.props.humidity}</p>\r\n        )}\r\n        {this.props.description && (\r\n          <p className=\"weather_value\">Conditions: {this.props.description}</p>\r\n        )}\r\n        {this.props.error && (\r\n          <p className=\"weather_error\">{this.props.error}</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Forms from \"./components/Forms\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"b26a0c9823949ba15b3c90fffe868c93\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n\n    const data = await api_call.json();\n    if (city && country) {\n      //console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the City's name and Country's name\",\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 titleContainer\">\n                  <Titles></Titles>\n                </div>\n                <div className=\"col-xs-7 formContainer\">\n                  <Forms getWeather={this.getWeather}></Forms>\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  ></Weather>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}